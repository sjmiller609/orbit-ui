pipeline:
  # run linter first
  lint:
    image: node
    commands:
      - npm i eslint eslint-watch eslint-plugin-import
      - npm run lint
    when:
      event:
        - pull_request
        - push

  # build the new image
  build:
    image: astronomerio/ap-build:0.1.1
    commands:
      - docker build -t astronomerinc/ap-orbit-ui:dev .
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      event: push

  # start postgres
  postgres:
    image: postgres:9.6.15
    name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    detach: true
    when:
      event: push

  # start prisma
  prisma:
    image: prismagraphql/prisma:1.34.8
    name: prisma
    environment:
      PRISMA_CONFIG: |
        port: 4466
        databases:
          default:
            connector: postgres
            uri: "postgres://postgres:postgres@postgres:5432/postgres"
            migrations: true
            rawAccess: true
    detach: true
    when:
      event: push

  # start houston
  houston:
    image: astronomerinc/ap-houston-api:dev
    name: houston
    environment:
      NODE_ENV: "development"
      WEBSERVER__PORT: "8871"
      PRISMA__ENDPOINT: "http://prisma:4466/houston"
      PRISMA__DEBUG: "false"
      ORBIT__PORT: "8080"
      DATABASE__CONNECTION: "postgres://postgres:postgres@postgres:5432/postgres"
      PUBLIC_SIGNUPS: "true"
      EMAIL_CONFIRMATION: "false"
      EMAIL__ENABLED: "false"
      JWT__PASSPHRASE: "secretpassword"
      DEPLOYMENTS__DATABASE__CONNECTION: "postgres://postgres:postgres@postgres:5432/postgres"
      DEPLOYMENTS__DATABASE__ENABLED: "true"
      DEPLOYMENTS__LOG_HELM_VALUES: "true"
      STRIPE_SECRET_KEY: "sk_test_mOmH7YTOYXLyaMsWwl4M3r98"
      STRIPE_ENABLED: "true"
      HELM__RELEASE_VERSION: "0.7.5"
    detach: true
    when:
      event: push

  # wait for DB to come online
  wait-for-db:
    image: astronomerio/ap-build:0.1.1
    commands:
      - while ! nc -w 1 -z postgres 5432; do sleep 1; done
      - while ! nc -w 1 -z prisma 4466; do sleep 1; done
      - while ! nc -w 1 -z houston 8871; do sleep 1; done
    when:
      event: push

  # start orbit
  start-orbit:
    image: astronomerinc/ap-orbit-ui:dev
    name: orbit
    commands:
      - cd /srv/orbit-ui
      - npm run open:drone
    when:
      event: push
    detach: true

  # run E2E system tests
  cypress:
    image: astronomerinc/ap-orbit-ui:dev
    commands:
      - sleep 80
      - cd /srv/orbit-ui
      - sed -i 's/localhost:5000/orbit:8080/g' cypress.json
      - npm run cypress:CI
    when:
      event: push

  # push image - only from master
  push:
    image: astronomerio/ap-build:0.1.1
    commands:
      - docker login -u $${DOCKER_USERNAME} -p $${DOCKER_PASSWORD}
      - docker push astronomerinc/ap-orbit-ui:dev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    secrets: [ docker_username, docker_password ]
    when:
      event: push
      branch: [ master ]

  # Trigger build of production images from master
  trigger:
    image: plugins/downstream
    server: https://drone.astronomer.io
    fork: true
    secrets: [ downstream_token ]
    repositories:
      - astronomer/astronomer
    when:
      event: push
      branch: [ master ]

  # notify:
    image: plugins/slack
    secrets: [ slack_webhook ]
    channel: platform
    when:
      status: [ failure ]
