version: 2.1
jobs:
  build:
    executor: docker-executor
    steps:
      - docker-build:
          image_name: ap-orbit-ui
          dockerfile: Dockerfile.prod
  scan:
    executor: clair-scanner/default
    steps:
      - clair-scan:
          image_name: ap-orbit-ui
  publish-dev:
    executor: docker-executor
    steps:
      - push:
          comma_separated_tags: "dev,$CIRCLE_SHA1"
          image_name: ap-orbit-ui
  publish-prod:
    executor: docker-executor
    steps:
      - push:
          comma_separated_tags: "master,latest"
          image_name: ap-orbit-ui
  # This is a special case. Only when a branch matches
  # release-* do we also publish the image with a tag
  # matching the name of the branch.
  publish-release-branch:
    executor: docker-executor
    steps:
      - push:
          comma_separated_tags: "$CIRCLE_BRANCH"
          image_name: ap-orbit-ui
  # This step requires manual approval - see the workflow. The result
  # is a PR to the Helm chart with the new image and Chart.yaml versions
  # incremented in the umbrella and sub charts. If this process occurs
  # more than once before a new Helm release, then the existing Docker
  # tag and GitHub release for this repository are replaced to include
  # the additional changes.
  github-release:
    executor: docker-executor
    steps:
      - checkout
      # Set $NEXT_HELM_TAG to the most recent Helm chart GitHub release base version
      # ('base' meaning 0.10.0-alpha.1 is translated to 0.10.0) with the patch version
      # incremented by one. Does not include "v" in front. For example, if the most
      # recent release referres to tag "v0.10.0-alpha.1", then the environment variable
      # is set to 0.10.1
      - get-next-helm-tag
      # Push a Docker image tagged as the next helm tag.
      - push:
          comma_separated_tags: "$NEXT_HELM_TAG"
          image_name: ap-orbit-ui
      # Publish a GitHub release on this repository,
      # automatically generating a change log.
      - publish-github-release:
          tag: "$NEXT_HELM_TAG"
      # Open a PR to the helm chart with this new version.
      - pr-to-helm-chart:
          repository: "helm.astronomer.io"
          file: "charts/astronomer/values.yaml"
          yaml_key: "images.orbit.tag"
          new_version: "$NEXT_HELM_TAG"
          reversion_chart_files: "Chart.yaml,charts/astronomer/Chart.yaml"
workflows:
  version: 2.1
  build-images:
    jobs:
      - build
      - scan:
          requires:
            - build
      - publish-dev:
          requires:
            - scan
      - publish-prod:
          requires:
            - scan
          filters:
            branches:
              only: master
      # This step is just for a special case of
      # branch naming.
      - publish-release-branch:
          requires:
            - scan
          filters:
            branches:
              only: '/release-.*/'
      # 'release-approval' requires that an in-app button be clicked
      # by an authorized member of the project to continue.
      # Then a versioned image will be published as one more than
      # current helm chart version, a Github release will be made
      # with automatically generated release notes, and a PR
      # will be opened to the Helm chart repository including the
      # new version.
      - release-approval:
          type: approval
          requires:
           - publish-prod
           - publish-dev
          filters:
            branches:
              only: master
      - github-release:
          requires:
            - release-approval
          filters:
            branches:
              only: master
orbs:
  clair-scanner: ovotech/clair-scanner@1.6.0
executors:
  docker-executor:
    environment:
      GIT_ORG: sjmiller609
      DOCKER_REPO: sjmiller609
    docker:
      - image: circleci/python:3
commands:
  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build the Docker image
          command: |
            set -xe
            image_name="<< parameters.image_name >>"
            docker build -t $image_name --file << parameters.path>>/<< parameters.dockerfile >> --build-arg BUILD_NUMBER=${CIRCLE_BUILD_NUM} << parameters.path >>
            docker save -o << parameters.image_name >>.tar $image_name
      - persist_to_workspace:
          root: .
          paths:
            - './*.tar'
  clair-scan:
    description: "Vulnerability scan a Docker image"
    parameters:
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Move tarball to directory for scan
          command: mkdir /tmp/tarballs && mv /tmp/workspace/<< parameters.image_name >>.tar /tmp/tarballs/
      - clair-scanner/scan:
          docker_tar_dir: /tmp/tarballs
  push:
    description: "Push a Docker image to DockerHub"
    parameters:
      comma_separated_tags:
        type: string
        default: latest
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
      - run:
          name: Push Docker image(s)
          command: |
            set -e
            for tag in $(echo "<< parameters.comma_separated_tags >>" | sed "s/,/ /g");
            do
              set -x
              # If the tag looks starts with "v" then a digit, remove the "v"
              pattern="^(v[0-9].*)"
              if [[ $tag =~ $pattern ]]; then
                tag="${tag:1}"
              fi
              docker tag << parameters.image_name >> << parameters.docker_repository >>/<< parameters.image_name >>:${tag}
              docker push << parameters.docker_repository >>/<< parameters.image_name >>:${tag}
              set +x
            done
  publish-github-release:
    description: "Create a release on GitHub"
    parameters:
      tag:
        type: string
        default:  "$NEXT_HELM_TAG"
      ghr_version:
        type: string
        default:  "0.13.0"
    steps:
      - run:
          name: Create a release on GitHub
          command: |
            set -xe

            # Install ghr, a CLI tool for doing GitHub releases
            WORK_DIR=$(pwd)
            cd /tmp
            wget https://github.com/tcnksm/ghr/releases/download/v<< parameters.ghr_version >>/ghr_v<< parameters.ghr_version >>_linux_amd64.tar.gz
            tar -xvf ./ghr_v<< parameters.ghr_version >>_linux_amd64.tar.gz
            mkdir -p /tmp/bin
            mv ghr_v<< parameters.ghr_version >>_linux_amd64/ghr /tmp/bin/
            export PATH=/tmp/bin:$PATH
            cd $WORK_DIR

            # Delete the tag from the local repository, if it exists.
            # This is done so the release notes are generated
            # correctly in the event of an overwrite.
            git tag -d v<< parameters.tag >> || true

            # Generate release notes in Markdown format
            COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"* %ai %h: %s" | awk '{$4=""; print $0}')
            AUTHORS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%aE" | awk '!a[$0]++')
            cat \<<EOT > /tmp/release_notes.md

            ## Changes:

            $COMMITS

            ## Authors:

            $AUTHORS
            EOT


            echo "==================="
            cat /tmp/release_notes.md
            echo "==================="

            # Existing, matching release and tag will be overwritten, if present
            ghr \
              -t $GITHUB_TOKEN \
              -c $CIRCLE_SHA1 \
              -n v<< parameters.tag>> \
              -b "$(cat /tmp/release_notes.md)" \
              -delete \
              -replace \
              v<< parameters.tag>>
  get-next-helm-tag:
    description: "Set an environment variable to the current Helm chart version with the patch number incremented by one"
    parameters:
      organization:
        type: string
        default: $GIT_ORG
      repository:
        type: string
        default: helm.astronomer.io
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - run:
          name: Determine the next Helm chart version
          command: |
            set -e
            pip install --user requests packaging
            cat > /tmp/next_helm_version.py \<<- EOM
            import sys
            import json
            import requests
            from packaging.version import parse as semver
            most_recent_tag= json.loads(requests.get("https://api.github.com/repos/<< parameters.organization >>/<< parameters.repository >>/releases").text)[0]['tag_name']
            print(f"Most recent helm release tag: {most_recent_tag}", file=sys.stderr)
            base_version = semver(most_recent_tag).base_version
            print(f"Parsed base version as {base_version}", file=sys.stderr)
            base_version = semver(base_version)
            major, minor, patch = base_version.release
            patch += 1
            new_version = ".".join(str(i) for i in [major, minor, patch])
            print(f"Calculated new version as {new_version}", file=sys.stderr)
            sys.stdout.write(new_version)
            EOM
            NEXT_HELM_TAG=$(python /tmp/next_helm_version.py)
            # Make this environment variable available to following steps
            echo "export NEXT_HELM_TAG=${NEXT_HELM_TAG}" >> $BASH_ENV
  pr-to-helm-chart:
    description: "Make a PR to another repository, modifying one YAML file"
    parameters:
      repository:
        type: string
        default: "helm.astronomer.io"
      file:
        type: string
        default: "charts/astronomer/values.yaml"
      yaml_key:
        type: string
      new_version:
        type: string
        default: $CIRCLE_TAG
      reversion_chart_files:
        type: string
        default: "Chart.yaml"
      git_org:
        type: string
        default: $GIT_ORG
    steps:
      - run:
          name: Clone repository
          command: |
            set -e
            cd /tmp
            git clone https://sjmiller609:${GITHUB_TOKEN}@github.com/<< parameters.git_org >>/<< parameters.repository >>.git
      - run:
          name: Checkout a new branch
          command: |
            set -xe
            cd /tmp/<< parameters.repository >>
            git checkout -b "automated-pr-${CIRCLE_PROJECT_REPONAME}-<< parameters.new_version >>"
            git branch
      - run:
          name: Modify Helm chart
          command: |
            set -xe
            cd /tmp/<< parameters.repository >>

            # If the value starts with "v" then a digit, remove the "v"
            #
            value="<< parameters.new_version >>"
            pattern="^(v[0-9].*)"
            if [[ $value =~ $pattern ]]; then
              value="${value:1}"
            fi

            # Set up a python script to find and replace in YAML,
            # including preservation of comments, key order, and so forth
            #
            pip install --user ruamel.yaml
            cat > /tmp/modify.py \<<- EOM
            import sys
            from ruamel.yaml import YAML
            from functools import reduce
            import operator

            with open("<< parameters.file >>", "r") as f:
                file_content = f.read()

            def getFromDict(dataDict, mapList):
                return reduce(operator.getitem, mapList, dataDict)

            def setInDict(dataDict, mapList, value):
                getFromDict(dataDict, mapList[:-1])[mapList[-1]] = value

            def my_represent_none(self, data):
                return self.represent_scalar(u'tag:yaml.org,2002:null', u'~')

            yaml = YAML()
            # Ensure '~' is used to represent YAML none
            yaml.representer.add_representer(type(None), my_represent_none)

            code = yaml.load(file_content)
            path = "<< parameters.yaml_key >>".split(".")
            setInDict(code, path, "<< parameters.new_version >>")

            with open("<< parameters.file >>", "w") as f:
              yaml.dump(code, f)

            chart_files = "<< parameters.reversion_chart_files >>".split(",")
            for file in chart_files:
              with open(file, "r") as f:
                file_content = f.read()
              code = yaml.load(file_content)
              code['version'] = "<< parameters.new_version >>"
              with open(file, "w") as f:
                yaml.dump(code, f)
            EOM

            # re-write the helm chart
            python /tmp/modify.py

            # add and commit
            git add --all
            git status

            set +x
            git config --global user.email "sjmiller609@gmail.com"
            git config --global user.name "Circle CI"
            set -x

            git commit -m "Circle CI: Update image to ${value}" -- << parameters.file >>
            git push origin "automated-pr-${CIRCLE_PROJECT_REPONAME}-<< parameters.new_version >>" --force
      - run:
          name: Open PR to Helm chart repository
          command: |
            set -xe
            cd /tmp/<< parameters.repository >>

            # Install a tool that will let us open PRs from the command line
            sudo apt-get install -y hub

            # Set PR title
            echo "Update $CIRCLE_PROJECT_REPONAME to v<< parameters.new_version >>" > /tmp/pr_body.md
            # Set PR body
            cat /tmp/release_notes.md >> /tmp/pr_body.md

            set +x
            mkdir -p ~/.config
            cat \<<EOT > ~/.config/hub
            ---
            github.com:
            - protocol: https
              user: sjmiller609
              oauth_token: ${GITHUB_TOKEN}
            EOT
            set -x

            # Open pull request
            hub pull-request \
              --file=/tmp/pr_body.md
